
//Open images
//Reverse the images
//Bleach Correction
//Save images

//Crop images

//FUNCTIONS

//Closes all images
function closeAllImages()	{
 	while (nImages>0) {
		selectImage(nImages);
		close();
	}
}


waitForUser("Choose the current directory");
dir=getDirectory("Choose a Directory");
IJ.log("dir: " + dir);

num_expts = getFileList(dir);
//print("num_expts.length: " + num_expts.length);
//printArray(num_expts);

for (i = 0; i < num_expts.length; i++) {
    curr_expt = num_expts[i];
    print("curr_expt: " + curr_expt);
    data = getFileList(dir + curr_expt);
    proc = dir + curr_expt + "LowProcessImages" + File.separator;
    File.makeDirectory(proc);

    for (j = 0; j < data.length; j++){
        curr_image = data[j];
        open(dir + curr_expt + data[j]);
        frames = nSlices();
        if (startsWith(curr_image, "GFP")){
            run("Duplicate...", "title=Duplicate_GFP duplicate range=1-["+frames+"]");
            run("Reverse");
            selectWindow("Duplicate_GFP");
            runMacro("BleachCorrection.txt");
            title="GFP_BleachCorrection";
            saveAs("Tiff", proc+title);
            selectWindow("GFP_BleachCorrection.tif");
            run("Duplicate...", "title=GFP duplicate range = 1-["+frames+"]");
            selectWindow("GFP");
            run("8-bit");
        } else if (startsWith(curr_image, "mCh")){
            run("Duplicate...", "title=Duplicate_mCherry duplicate range=1-["+frames+"]");
            run("Reverse");
            selectWindow("Duplicate_mCherry");
            runMacro("BleachCorrection.txt");
            title="mCherry_BleachCorrection";
            saveAs("Tiff", proc+title);
            selectWindow("mCherry_BleachCorrection.tif");
            run("Duplicate...", "title=mCherry duplicate range = 1-["+frames+"]");
            selectWindow("mCherry");
            run("8-bit");
        } else if (startsWith(curr_image, "Nom")){
            run("Duplicate...", "title=Duplicate_Nom duplicate range=1-["+frames+"]");
            run("Reverse");
        }
    }

    selectWindow("GFP");
    run("Merge Channels...", "c1=mCherry  c2=GFP create keep");

    waitForUser("Adjust Brightness/Contrast");

    run("Stack to RGB", "slices");

    selectWindow("Composite");
    run("8-bit");

    run("MultiStackReg", "stack_1=Composite action_1=Align file_1=[] stack_2=None action_2=Ignore file_2=[] transformation=Translation save");
	     //Save the transformation matrix into "LowProcessImages" folder

    trans = proc+"TransformationMatrices.txt";

    selectWindow("GFP_BleachCorrection.tif");
    run("MultiStackReg", "stack_1=GFP_BleachCorrection.tif action_1=[Load Transformation File] file_1=["+trans+"] stack_2=None action_2=Ignore file_2=[] transformation=Translation");
    saveAs("Tiff", proc+"GFP_Transform");

    selectWindow("mCherry_BleachCorrection.tif");
    run("MultiStackReg", "stack_1=mCherry_BleachCorrection.tif action_1=[Load Transformation File] file_1=["+trans+"] stack_2=None action_2=Ignore file_2=[] transformation=Translation");
    saveAs("Tiff", proc+"mCherry_Transform");

    selectWindow("Duplicate_Nom");
    run("MultiStackReg", "stack_1=Duplicate_Nom action_1=[Load Transformation File] file_1=["+trans+"] stack_2=None action_2=Ignore file_2=[] transformation=Translation");
    saveAs("Tiff", proc+"Nom_Transform");

    selectWindow("GFP_Transform.tif");
    run("Merge Channels...", "c1=mCherry_Transform.tif  c2=GFP_Transform.tif create keep");

    waitForUser("Adjust Brightness/Contrast");

    run("Stack to RGB", "slices");

    selectWindow("Composite");
    saveAs("Tiff", proc+"Combined_Transform");

    closeAllImages();
}
