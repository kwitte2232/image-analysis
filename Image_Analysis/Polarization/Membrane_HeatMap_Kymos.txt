'''
Kristen Witte
Glotzer Lab
Membrane_HeatMap_Kymos.txt

*NOTE*
Prior to running this macro the user MUST have used the JFILAMENT plugin to build
a series of snakes that will be used to track the cell outline. Run the python
function "duplicate_snakes" to set up the Current Snake directory.
******

This macro extracts a series of critical data by developing kymographs of cell
membranes. The user defines the time and position of both the previous site of bud emergence 
and the new site of bud emergence. The macro uses that information to build a kymograph such 
that the position of bud emergence occurs at X = 0, as X goes from -180 to 180. Comments throughout the script
to describe how the snakes coordinates are taken apart and reassembled to ensure
that the position of Bud Emergence occurs at the center. Using the "kymograph-ed"
version of the target positions and the position of bud emergence, the
Polarization Efficiency can be extracted using the macro titled "Extract_Polarization_Efficiency.txt."
In addition, the macro generates a series of kymographs, that can be used for
data visualization.

There are places where this macro can be improved. A primary place is the development of 
functions to decrease the amount of repeated code. Potentially a worthwhile project for 
skills development. 

Requirements:
1) Directory Setup:
Root Directory = CellXX
  >Centers_crop.tif
  >mChStack_crop.tif
  >MotherCell/
    >Current Snake/
      >snakes2.txt
    >snakes.txt
  >Nom_crop.tif
  >Targets_crop.tif
  >Targets_Edges.tif

Dependencies
1) Output of snakes from JFILAMENT as mentioned above

Outputs:
1) Bud_Montage.tif (binary image with white pixel at time and pos of BE)
2) Bud_Straight_Snakes/ (folder of individual images that make up Bud_Montage)
3) BudEmergence.txt (text file that contains the time and position of BE)
4) dsRED_Montage_HM_Centers_Bud.tif (psuedo-colored kymograph)
5) dsRED_Montage_HM_Centers.tif (psuedo-colored kymograph)
6) dsRED_Montage_HM.tif (psuedo-colored kymograph)
7) dsRED_Montage.tif (mcherry kymograph)
8) dsRED_Straight_Snakes/ (folder of individual images that make up dsRED_Montage)
9) GFP_Montage.tif (derived from CenterPoints.tif)
10) GFP_Straight_Snakes/ (folder of individual images that make up GFP_Montage)
11) JPEG/ (do not need this folder, this can be deleted)
12) Prev_Montage.tif (binary image with white pixel at time and pos of previous BE)
13) Prev_Straing_Snakes/ (folder of individual images that make up Prev_Montage)
12) ROIs.zip (ROIs of the edited snakes that make up the poly-lines)

'''



//FUNICTIONS
//Returns the maximum of the array
function maxOfArray(array) {
    min=0;
    for (a=0; a<lengthOf(array); a++) {
        min=minOf(array[a], min);
    }
    max=min;
    for (a=0; a<lengthOf(array); a++) {
        max=maxOf(array[a], max);
    }
    return max;
}

//Returns the minimum of the array
function minOfArray(array) {
    max=0;
    for (a=0; a<lengthOf(array); a++) {
        max=maxOf(array[a], max);
    }
    min=max;
    for (a=0; a<lengthOf(array); a++) {
        min=minOf(array[a], min);
    }
    return min;
}

//Returns the minimum value of the array that is greater than 0
function minNonZeroOfArray(array) {
    max=0;
    for (a=0; a<lengthOf(array); a++) {
        max=maxOf(array[a], max);
    }
    min=max;
    for (a=0; a<lengthOf(array); a++) {
        if (array[a]>0) {
        	min=minOf(array[a], min);
        } else {
        	min=minOf(1000, min);
        }
    }
    return min;
}

//Returns the indices at which a value occurs within an array
function indexOfArray(array) {
    count=0;
    for (i=0; i<lengthOf(array); i++) {
        if (array[i]==value) {
            count++;
        }
    }
    if (count>0) {
        //indices=newArray(count);
        count=0;
        for (i=0; i<lengthOf(array); i++) {
            if (array[i]==value) {
                indices=i;
                count++;
            }
        }
		return indices;
	}
}

//Prints the array in a human-readable form
function printArray(array) {
    string="";
    for (i=0; i<lengthOf(array); i++) {
        if (i==0) {
            string=string+array[i];
        } else {
            string=string+", "+array[i];
        }
    }
    print(string);
}

//Closes all images
function closeAllImages()	{
 	while (nImages>0) {
		selectImage(nImages);
		close();
	}
}


roiManager("reset");


waitForUser("Choose the cell folder");
cellDir=getDirectory("Choose a Directory");
//list=getFileList(cellDir);
open(cellDir+"Centers_crop.tif");
open(cellDir+"mChStack_crop.tif");
open(cellDir+"Targets_crop.tif");

selectWindow("Centers_crop.tif");
frames=nSlices;
run("Duplicate...", "title=Duplicate_GFP duplicate range=1-["+frames+"]");

selectWindow("mChStack_crop.tif");
run("Duplicate...", "title=Duplicate_dsRED duplicate range=1-["+frames+"]");

selectWindow("Targets_crop.tif");
makeOval(0,0,10,10);
run("In [+]");
run("In [+]");
run("In [+]");

msg="Choose the x,y coordinate of the bud site by drawing a circle around the emerging bud in the first frame visible.";
waitForUser(msg + "\n" + "When finished, press OK");
selectWindow("Targets_crop.tif");
budEmerge=getSliceNumber();
//selectWindow("Duplicate_GFP");
//run("Restore Selection");
//setSlice(budEmerge);

setResult("Bud Emergence", 0, budEmerge);
selectWindow("Targets_crop.tif");
roiManager("Add");
List.setMeasurements;
//print(List.getList);
budX=List.getValue("X");
budY=List.getValue("Y");
setResult("BudX", 0, budX);

msg="Choose the x,y coordinate of the previous bud";
waitForUser(msg + "\n" + "When finished, press OK");
selectWindow("Targets_crop.tif");
prevBud=getSliceNumber();
//selectWindow("Duplicate_GFP");
//run("Restore Selection");
//setSlice(budEmerge);

setResult("Prev Bud", 0, budEmerge);
selectWindow("Targets_crop.tif");
roiManager("Add");
List.setMeasurements;
prevX=List.getValue("X");
prevY=List.getValue("Y");
setResult("PrevX", 0, prevX);

waitForUser("Choose the current cell folder");
tmp=getDirectory("Choose a Directory");
IJ.log(tmp);
updateResults();
selectWindow("Results");
saveAs("Results", tmp+"BudEmergence.csv");

snakeGFPDir=tmp+"GFP_Straight_Snakes"+File.separator;
File.makeDirectory(snakeGFPDir);
  if (!File.exists(snakeGFPDir))
      exit("Unable to create directory");
  print("");
  print(snakeGFPDir);

snakeREDDir=tmp+"dsRED_Straight_Snakes"+File.separator;
File.makeDirectory(snakeREDDir);
  if (!File.exists(snakeREDDir))
      exit("Unable to create directory");
  print("");
  print(snakeREDDir);

snakeBudDir=tmp+"Bud_Straight_Snakes"+File.separator;
File.makeDirectory(snakeBudDir);
  if (!File.exists(snakeBudDir))
      exit("Unable to create directory");
  print("");
  print(snakeBudDir);

snakePrevDir=tmp+"Prev_Straight_Snakes"+File.separator;
File.makeDirectory(snakePrevDir);
if (!File.exists(snakePrevDir))
  exit("Unable to create directory");
print("");
print(snakePrevDir);

//waitForUser("Choose the directory containing your Snakes file.");
dir=tmp+"Current Snake"+File.separator;
IJ.log(dir);
traces=getFileList(dir);
selectWindow("Duplicate_GFP");
frames=nSlices();
getDimensions(width, height,channels, slices, frames);
f=nSlices();
r=nResults();
cellNumber=newArray(f+1);
numRows=0;
distRows=0;

newImage("New_Bud", "8-bit Black", width, height, slices);
selectWindow("New_Bud");
setSlice(budEmerge);
makeRectangle(budX,budY,1,1);
setColor("white");
fill();

newImage("Prev_Bud", "8-bit Black", width, height, slices);
selectWindow("Prev_Bud");
setSlice(1);
makeRectangle(prevX,prevY,1,1);
setColor("white");
fill();

maxInt=newArray(f+1);
maxNormInt=newArray(f+1);
maxCoord=newArray(f+1);
minInt=newArray(f+1);
minCoord=newArray(f+1);

selectWindow("Duplicate_GFP");

setBatchMode(true);


//IMPORT THE MOTHER CELL SNAKES

for (n=1; n<=f; n++) {
	setSlice(n);
	cellNumber[n]=n;
	//IJ.log("n=" + n);
	badPts=0;

		for (i=0; i<traces.length; i++) {

			string=File.openAsString(dir + traces[i]);
			rows=split(string, "\n");
			counter=0;
				//counter is equal to the number of points in the snake for 
				//that specific frame	

			for(j=0; j<rows.length; j++){
				column=split(rows[j], "\t");

				if (column[0]==n) {
					counter++;
				}
			}

			x=newArray(rows.length);
			y=newArray(rows.length);
			distTmp=newArray(rows.length);
			xcoordTmp=newArray(counter);
			ycoordTmp=newArray(counter);
			
			//rows is equal to the sum total of all the points for all the frames

			//ADD THE SNAKE ROIS, DEFINE THE CENTER, AND DRAW A LINE FROM BUD TO OPP SIDE

			for(j=numRows; j<rows.length; j++){
				// numRows = 0 to start, rows.length is the total number of points
				column=split(rows[j], "\t");
				//split the rows into an array with each column as an element

				if (column[0]==n) {
					x[j]=parseFloat(column[2]);
					y[j]=parseFloat(column[3]);
					numRows++;

 				}
 			}

 			if (n>1) {
 				start=numRows-counter;
 				// start is the position within rows.length that a given frame begins 
 					// its xy coordinates. numRows increases with each successive pass
 					// through the loop. One pass through the loop is one frame.
 					// At the end numRows will be equal to rows.length
 			} else {
 				start=0;
 			}

 			xcoordTmp=Array.slice(x, start, numRows);
			ycoordTmp=Array.slice(y, start, numRows);
			// Array.slice extracts part of an array. x is which array, start is the
				// first element to extract, numRows is the last element to extract
			// All this is doing is pulling out each individual x, y coordinate and adding
				// it to an x-coordinate array and then a y-coordinate array

 			makeSelection("polyline", xcoordTmp, ycoordTmp);
			run("Interpolate", "interval=1");
			run("Line to Area");
			List.setMeasurements;
			cellX=List.getValue("X");

			diffX=cellX-budX;
			diffY=cellY-budY;
			m=(diffY)/(diffX);
			b=budY-m*budX;
			// Find the slope of the line and the y-intercept from the center of the ROI
				// to the site of bud emergence. Will be used to rearrange the start and
				// end points of the x and y coordinate arrays. 



			//FIND THE DISTANCES FROM THE LINE TO POINTS OF THE SNAKE THAT ARE OPP THE BUD
				// The we only want to know the shortest distance from point to a line
					// on the side that is opposite the bud because the line goes the
					// entire way through the cell. Cut the cell in half, and only 
					// measure the distances on the side the half without the bud
				//distTmp is the size of rows, the total number of points for all the
					//frames. Fills in 0 for the element in the array if the "if" 
					//statements are not satisfied --> all the points that are
					// on the half with the bud
 			for(j=distRows; j<rows.length; j++){
				column=split(rows[j], "\t");
				dist=newArray(counter);

				if (column[0]==n) {
					xPt=parseFloat(column[2]);
 					yPt=parseFloat(column[3]);
 					distRows++;

 					if (cellX<budX){

 						if (xPt<=cellX){
 							top=yPt-m*xPt-b;
 							bottom=m*m+1;
 							distTmp[j]=(abs(top))/(sqrt(bottom));
						} else {
 						badPts++;
 						}
 					}

 					if (cellX>budX){

 						if (xPt>=cellX){
 							top=yPt-m*xPt-b;
 							bottom=m*m+1;
 							distTmp[j]=(abs(top))/(sqrt(bottom));
						} else {
 						badPts++;
 						}
 					}
 				}
 			}

 			dist=Array.slice(distTmp, start, numRows);
 			// start tells you which element within distTmp is the position of the first point for the
 					// frame that is currently being worked on. numRows is the position of the element 
 					// at the end of the frame. 
 				// Half of the points will be non-zero (from the half opp the bud), while 
 					// the other half will be zero (the half from the same side of bud).

 			//REARRANGE XCOORDTMP AND YCOORDTMP ARRAYS SO THAT THE START AND END ARE AT THE POINT CLOSEST TO THE LINE OPP THE BUD

			value=minNonZeroOfArray(dist);
				// find the minimum value of an array that is greater than zero (what is 
					// the value?)
 			indexMin=indexOfArray(dist);
 				// find the index position of the minimum non-zero value (where is the 
 					// value?)
 			end=indexMin-1;
 				// "end" is the index position immediately adjacent to the index position 
 					// of the minimum. Specifically, to the left (depending on the following code,
 					// this could have been either to the left or to the right)
 				// Next steps split the existing xcoordTmp array, which has all of the x points for 
 					// that frame, into two arrays which are then re-combined so that the 
 					// first element of the array is the minimum and the last element of the
 					// array is the element that was initial adjacent to the minimum (end)
 			xSplit1=Array.slice(xcoordTmp, indexMin, counter);
 			xSplit2=Array.slice(xcoordTmp, 0, end);
 			xcoord=Array.concat(xSplit1, xSplit2);
 			ySplit1=Array.slice(ycoordTmp, indexMin, counter);
 			ySplit2=Array.slice(ycoordTmp, 0, end);
 			ycoord=Array.concat(ySplit1, ySplit2);


 			//ADD THE REORGANIZED ARRAYS AS A POLYLINE SELECTION AND PROCESS THE PIXEL INTENSITY ACROSS THE LINE

 			makeSelection("polyline", xcoord, ycoord);
 			roiManager("Add");
			title=getSliceNumber();
			run("Interpolate", "interval=1");
			run("Straighten...", "line=6");
			selectWindow("Duplicate_GFP-1");
			w=getWidth;
			if (w!=100) {
				run("Size...", "width=100 height=6 average interpolation=Bilinear");
			}

			saveAs("Tiff", snakeGFPDir+"0"+title);
			selectWindow("0"+n+".tif");
			close();
			selectWindow("Duplicate_GFP");
		}
	}

selectWindow("Duplicate_dsRED");
f=nSlices();
r=nResults();
cellNumber=newArray(f+1);
numRows=0;

selectWindow("Duplicate_dsRED");

for (n=1; n<=f; n++) {
	//setBatchMode(true);
	setSlice(n);
	cellNumber[n]=n;

	roiManager("select",n+1);
	title=getSliceNumber();
	run("Interpolate", "interval=1");
	run("Straighten...", "line=6");
	selectWindow("Duplicate_dsRED-1");
	w=getWidth;

	if (w!=100) {
		run("Size...", "width=100 height=6 average interpolation=Bilinear");
	}

	saveAs("Tiff", snakeREDDir+title);
	selectWindow(n+".tif");
	close();
	//setBatchMode(false);
	selectWindow("Duplicate_dsRED");
}

selectWindow("New_Bud");
f=nSlices();
r=nResults();
cellNumber=newArray(f+1);
numRows=0;

for (n=1; n<=f; n++) {
	setSlice(n);
	cellNumber[n]=n;

	roiManager("select",n+1);
	title=getSliceNumber();
	run("Interpolate", "interval=1");
	run("Straighten...", "line=6");
	selectWindow("New_Bud-1");
	w=getWidth;

	if (w!=100) {
		run("Size...", "width=100 height=6 average interpolation=Bilinear");
	}

	saveAs("Tiff", snakeBudDir+title);
	selectWindow(n+".tif");
	close();
	selectWindow("New_Bud");
}


selectWindow("Prev_Bud");
f=nSlices();
r=nResults();
cellNumber=newArray(f+1);
numRows=0;

for (n=1; n<=f; n++) {
	setSlice(n);
	cellNumber[n]=n;

	roiManager("select",n+1);
	title=getSliceNumber();
	run("Interpolate", "interval=1");
	run("Straighten...", "line=6");
	selectWindow("Prev_Bud-1");
	w=getWidth;

	if (w!=100) {
		run("Size...", "width=100 height=6 average interpolation=Bilinear");
	}

	saveAs("Tiff", snakePrevDir+title);
	selectWindow(n+".tif");
	close();
	selectWindow("Prev_Bud");
}

closeAllImages();


stack=tmp+"GFP_Straight_Snakes";
run("Image Sequence...", "open=stack number=181 starting=1 increment=1 scale=100 file=[] or=[] sort");
run("Make Montage...", "columns=1 rows=181 scale=1 first=1 last=181 increment=1 border=0 font=12");
saveAs("Tiff",tmp+"GFP_Montage");
stack=tmp+"dsRED_Straight_Snakes";
run("Image Sequence...", "open=stack number=181 starting=1 increment=1 scale=100 file=[] or=[] sort");
run("Make Montage...", "columns=1 rows=181 scale=1 first=1 last=181 increment=1 border=0 font=12");
saveAs("Tiff",tmp+"dsRED_Montage");
stack=tmp+"Bud_Straight_Snakes";
run("Image Sequence...", "open=stack number=181 starting=1 increment=1 scale=100 file=[] or=[] sort");
run("Make Montage...", "columns=1 rows=181 scale=1 first=1 last=181 increment=1 border=0 font=12");
saveAs("Tiff",tmp+"Bud_Montage");
stack=tmp+"Prev_Straight_Snakes";
run("Image Sequence...", "open=stack number=181 starting=1 increment=1 scale=100 file=[] or=[] sort");
run("Make Montage...", "columns=1 rows=181 scale=1 first=1 last=181 increment=1 border=0 font=12");
saveAs("Tiff",tmp+"Prev_Montage");
roiManager("Save",tmp+"ROIs.zip");


jpeg=tmp+"JPEG"+File.separator;
File.makeDirectory(jpeg);
  if (!File.exists(jpeg))
      exit("Unable to create directory");

selectWindow("dsRED_Montage.tif");
run("Duplicate...", "title=dsRED_Montage-1");

selectWindow("dsRED_Montage-1");
run("Smooth");
setMinAndMax(1100,2500);
run("Fire");
selectWindow("dsRED_Montage-1");
run("Flatten");
saveAs("Tiff", tmp+"dsRED_Montage_HM");
selectWindow("dsRED_Montage_HM.tif");
run("Duplicate...", "title=dsRED_Montage_HM");
saveAs("Jpeg", jpeg+"dsRED_Montage_HM");

selectWindow("GFP_Montage.tif");
run("Duplicate...", "title=GFP_Montage-1");
selectWindow("GFP_Montage-1");
setAutoThreshold("Default dark");
run("Create Selection");
run("Enlarge...", "enlarge=1");
selectWindow("dsRED_Montage_HM.tif");
run("Restore Selection");
setColor("green");
fill();
saveAs("Tiff", tmp+"dsRED_Montage_HM_Centers");
run("Duplicate...", "title=dsRED_Montage_HM_Centers");
saveAs("Jpeg", jpeg+"dsRED_Montage_HM_Centers");

selectWindow("Bud_Montage.tif");
run("Duplicate...", "title=Bud_Montage-1");
selectWindow("Bud_Montage-1");
setAutoThreshold("Default dark");
run("Create Selection");
run("Enlarge...", "enlarge=1");
selectWindow("dsRED_Montage_HM_Centers.tif");
run("Restore Selection");
setColor("blue");
fill();
saveAs("Tiff", tmp+"dsRED_Montage_HM_Centers_Bud");

if(isOpen("Results")){
  selectWindow("Results"); 
  run("Close");
}

setBatchMode(false);
