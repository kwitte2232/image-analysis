setOption("DisableUndo", true);

createROIs=getBoolean("Would you like to create area ROIs?");

if (createROIs)	{
	
	anotherStack=0;
	doOver=0;
	setBatchMode(false);
	print("Images already processed:");
	
	do	{
		roiManager("Reset");
	
		tooManyCells=0;
		alreadyDone=0;
	
		if (anotherStack)	{
			run("Open Next");
			name=replace(getTitle(), ".tif", "");
		}	
		else	{
			name=openStack();
		}
		
		setSlice(1);
		run("Enhance Contrast", "saturated=0.5");
		dir=getDirectory("image");
		
		thumbDir=replace(dir, "processedImages/", "");
		thumbName=substring(name, 0, 7)+"_thumb.tif";
		thumbOpen=isOpen(thumbName);
		if (thumbOpen==0)	{
			if (anotherStack)	{
				selectWindow(lastThumbName);
				close();
			}
			open(thumbDir+thumbName);
			setLocation(40, 0);
			lastThumbName=thumbName;
		}
		
		procDir=dir+"processedAreas/";
		File.makeDirectory(procDir);
		if (anotherStack==0)	{
			list=getFileList(procDir);
			for (i=0; i<list.length; i++) {
				if (endsWith(list[i], ".zip"))	{
					thisName=replace(list[i], "_ROIs.zip", "");
					print(thisName);
				}
			}
		}
		
		do	{
			if (tooManyCells)	{
				count=roiManager("count");
				for (i=1; i<=count; i++)	{
					roiManager("Select", count-i);
					roiManager("Delete");
				}
			}
			else	{
				roiManager("Reset");
			}
			
			//tooManyCells=getBoolean("Would you like to create a mask to exclude some cells?");
			
			if (tooManyCells)	{
				waitForUser("Create an ROI mask, add it to the manager, then click OK.");
			}
			
	//		waitForUser("Click OK to proceed.");	// Debugging
			
			selectWindow(name+".tif");
			run("Select None");
			setSlice(1);
			setAutoThreshold("Li");
			run("Threshold...");
			if (doOver)	{
				waitForUser("Adjust the threshold levels and click OK.");
			}
			run("Create Selection");
			resetThreshold();
			//waitForUser("Click OK to proceed.");	// Debugging
			
			selectWindow(name+".tif");
			if (tooManyCells)	{
				roiManager("Add");
				roiManager("Combine");
				//waitForUser("Click OK to proceed.");	// Debugging
				run("Make Inverse");
				//waitForUser("Click OK to proceed.");	// Debugging
				run("Enlarge...", "enlarge=1");
				run("Enlarge...", "enlarge=-1");
				roiManager("Add");
				count=roiManager("count");
				do	{
					roiManager("Select", 0);
					roiManager("Delete");
					count=roiManager("count");
				}	while (count > 1);
			}
			else	{
				run("Make Inverse");
				run("Enlarge...", "enlarge=1");
				run("Enlarge...", "enlarge=-1");
				roiManager("Add");
			}
			count=roiManager("count");
			roiManager("Select", count-1);
			roiManager("Rename", "wholeCell");
			
	//		waitForUser("Click OK to proceed.");	// Debugging
			
			pixOffset=3;
			pixOffset=-pixOffset;
			run("Enlarge...", "enlarge="+pixOffset);
			roiManager("Add");
			count=roiManager("count");
			roiManager("Select", count-1);
			roiManager("Rename", "bigCplasm");
			
			run("Select None");
			run("Duplicate...", "title=temp");
			roiManager("Select", count-1);
			run("Make Inverse");
			run("Clear");
			run("Select None");
			setAutoThreshold("Li");
			run("Create Selection");
			resetThreshold();
			run("Enlarge...", "enlarge=-2");
			roiManager("Add");
			count=roiManager("count");
			roiManager("Select", count-1);
			roiManager("Rename", "threshCplasm");
			selectWindow("temp");
			close();
			
	//		waitForUser("Click OK to proceed.");	// Debugging
			
			selectWindow(name+".tif");
			roiManager("Select", count-2);
			run("Make Band...", "band=3");
			roiManager("Add");
			count=roiManager("count");
			roiManager("Select", count-1);
			roiManager("Rename", "PM");
			
	//		waitForUser("Click OK to proceed.");	// Debugging
			
			resetThreshold();
			
			selectWindow(name+".tif");
			width=getWidth();
			height=getHeight();
			makeOval(0, 0, width, height);
			run("Make Inverse");
			roiManager("Add");
			count=roiManager("count");
			roiManager("Select", count-1);
			roiManager("Rename", "bkgrnd");
			
			selectWindow(thumbName);
			resetThreshold();
			selectWindow(name+".tif");
			
			roiManager("Select", count-2);
			waitForUser("Click OK to proceed.");
			
			//doOver=getBoolean("Would you like a do-over?");
		
			}	while (doOver)	
		
		tooManyCells=0;
		doOver=0;
		print(name);
	
		roiManager("Save", procDir+name+"_ROIs.zip");
		roiManager("Reset");
		run("Select None");
		
		anotherStack=getBoolean("Would you like process to another image stack?");
	}	while (anotherStack);
	
	selectWindow("Log");
	run("Close");
}

processROIs=getBoolean("Would you like to process images using area ROIs that you've created?");

if (processROIs)	{
		
	do	{
		waitForUser("Choose a directory containing the image stacks to be processed.\n \nThe directory must contain a sub-directory (processedAreas) that contains corresponding ROIs");
		dir=getDirectory("Choose a directory");
		exists=File.isDirectory(dir+"processedAreas/");
	}	while (exists==0)
		
	procDir=dir+"processedAreas/";
	prefix=getString("Enter a prefix for the output data headers.", "");

	setBatchMode(true);
	sliceNames=newArray("gfp", "pre", "post");
	numToSubtract=newArray(5, 3, 2);
	areaNames=newArray("WC", "CP", "PM");
	
	list=getFileList(procDir);
	for (i=0; i<list.length; i++) {
		roiManager("Reset");
		name=replace(list[i], "_ROIs.zip", "");
		open(dir+name+".tif");
		width=getWidth();
		height=getHeight();
		depth=nSlices;
		roiManager("Open", procDir+name+"_ROIs.zip");
		count=roiManager("count");
	
		for (q=1; q<=depth; q++)	{
			setSlice(q);
			roiManager("Select", count-1);
			getRawStatistics(nPix, mean, min, max, std, hist);
			median=getMedian(hist, nPix);
			run("Select None");
			run("Subtract...", "value="+median+" slice");
		}
		saveAs("Tiff", procDir+name+"_BGSubt.tif");
		
		// waitForUser("Click OK to proceed.");	// Debugging
		
		//closeAllImages();
		
		//open(procDir+name+"_BGSubt.tif");
				
		setResult("Label", i, prefix+"_"+name);
		roiManager("Select", count-5);
		setSlice(1);
		getStatistics(area, mean, min, max, std);
		setResult("Area", i, area);
		
		for (r=0; r<3; r++)	{
			roiManager("Select", count-numToSubtract[r]);
			for (s=0; s<2; s++)	{
				setSlice(s+1);
				getStatistics(area, mean, min, max, std);
				setResult(prefix+"_"+areaNames[r]+sliceNames[s], i, mean);
			}
			for (s=2; s<depth; s++)	{
				t=s-1;
				setSlice(s+1);
				getStatistics(area, mean, min, max, std);
				setResult(prefix+"_"+areaNames[r]+sliceNames[2]+t, i, mean);
			}		
		}
		
		CPpre=getResult(prefix+"_"+areaNames[1]+sliceNames[1], i);
		PMpre=getResult(prefix+"_"+areaNames[2]+sliceNames[1], i);
		setResult(prefix+"_preRatio", i, PMpre/CPpre);
		for (s=2; s<depth; s++)	{
			t=s-1;
			CPpost=getResult(prefix+"_"+areaNames[1]+sliceNames[2]+t, i);
			PMpost=getResult(prefix+"_"+areaNames[2]+sliceNames[2]+t, i);
			setResult(prefix+"_postRatio"+t, i, PMpost/CPpost);
		}
		
		updateResults();
		saveAs("measurements", procDir+prefix+"_areas.xls");
	}
	
	selectWindow("Results");
	run("Close");
	closeAllImages();
}

function closeAllImages()	{
 	while (nImages>0) {
		selectImage(nImages);
		close(); 
	}
}


function openStack()	{
	open();
	run("In");
	run("In");
	run("In");
	run("In");
//	run("In");
	return replace(getTitle(), ".tif", "");
}


function getMedian(hist, nPix) {
  sum = 0;
  i = -1;
  nPix2 = nPix/2;
  do {
	  sum += hist[++i];
  } while (sum<=nPix2);
  return i;
}