//FUNICTIONS

//Returns the maximum of the array
function maxOfArray(array) {
    min=0;
    for (a=0; a<lengthOf(array); a++) {
        min=minOf(array[a], min);
    }
    max=min;
    for (a=0; a<lengthOf(array); a++) {
        max=maxOf(array[a], max);
    }
    print(max);
    return max;
}

//Returns the minimum of the array
function minOfArray(array) {
    max=0;
    for (a=0; a<lengthOf(array); a++) {
        max=maxOf(array[a], max);
    }
    min=max;
    for (a=0; a<lengthOf(array); a++) {
        min=minOf(array[a], min);
    }
    print min;
    return min;
}

//Returns the indices at which a value occurs within an array 
function indexOfArray(array) { 
    count=0; 	
    for (i=0; i<lengthOf(array); i++) { 
        if (array[i]==value) { 
            count++; 
        } 
    } 
    if (count>0) { 
        //indices=newArray(count); 
        count=0; 
        for (i=0; i<lengthOf(array); i++) { 
            if (array[i]==value) { 
                indices=i; 
                count++; 
            } 
        } 
		print(indices);
		return indices;  
	}
}



//READ


waitForUser("Choose a directory to save your straightened snake lines");
tmp=getDirectory("Choose a Directory");
snakeDir=tmp+"Straight_Snakes"+File.separator;
File.makeDirectory(snakeDir);
  if (!File.exists(snakeDir))
      exit("Unable to create directory");
  print("");
  print(snakeDir);
  
waitForUser("Choose the directory containing your Snakes file.");
dir=getDirectory("Choose a Directory");
//IJ.log(dir);
traces=getFileList(dir);
selectWindow("Duplicate");
f=nSlices();
//IJ.log("#frames=" + f);
//f for frame
cellNumber=newArray(f+1);
numRows=0;
maxInt=newArray(122);
maxCoord=newArray(122);

setBatchMode(true);

for (n=1; n<=f; n++) {
	setSlice(n);
	title=getSliceNumber();
	cellNumber[n]=n;
	//IJ.log("n=" + n);
			
		for (i=0; i<traces.length; i++) {
			//IJ.log("traces=" + traces.length);
			string=File.openAsString(dir + traces[i]);
			rows=split(string, "\n");
			//IJ.log("#rows=" + rows.length);
			counter=0;
		
			for(j=0; j<rows.length; j++){
				column=split(rows[j], "\t");
			
				if (column[0]==n) {
					counter++;		
				}
			}
			//IJ.log("numRows=" + numRows);
			//IJ.log("counter=" + counter);
			x=newArray(rows.length);
			y=newArray(rows.length);
		
			for(j=numRows; j<rows.length; j++){
				column=split(rows[j], "\t");
				xcoord=newArray(counter);
				ycoord=newArray(counter);
				
				if (column[0]==n) { 
					x[j]=parseFloat(column[2]);
					y[j]=parseFloat(column[3]);
					numRows++;
 				}
 				
 				if (n>1) {
 					start=numRows-counter;
 				} else {
 					start=0;
 				}
 				xcoord=Array.slice(x, start, numRows);
 				ycoord=Array.slice(y, start, numRows);
 			}
 		makeSelection("polyline", xcoord, ycoord);
 		roiManager("Add");
		title=getSliceNumber();
		//IJ.log("title="+title);
		run("Interpolate", "interval=1");
		run("Straighten...", "line=6");
		selectWindow("Duplicate-1");
		x=getWidth;
		//IJ.log(x);
		if (x<100) {
			run("Size...", "width=100 height=6 average interpolation=Bilinear");
		}
		saveAs("Tiff", snakeDir+title);
		makeLine(0,2,100,2,6);
		profileInt=getProfile();
		Array.print(profileInt);
		selectWindow("Duplicate");
		}
	value=maxOfArray(profileInt);
	IJ.log("max="+value);
	maxInt[n]=value;
	maxCoord[n]=indexOfArray(profileInt);
	IJ.log("index="+maxCoord[n]);	
}
setBatchMode(false);

Array.print(maxInt);
Array.print(maxCoord);
//Plot.create("Test Plot", "Xcoord", "Int", maxCoord, maxInt);