selectWindow("Kymo_HM_Centers.tif");
frames=nSlices;
run("Duplicate...", "title=Centers_Duplicate duplicate range=1-["+frames+"]");

selectWindow("dsRED_Stack.tif");
run("Duplicate...", "title=dsRED_Duplicate duplicate range=1-["+frames+"]");

target=0

n=0;
selectWindow("Centers_Duplicate");
run("In");
run("In");
run("In");
selectWindow("dsRED_Duplicate");
run("In");
run("In");
run("In");

x=0;
y=0;

targets=getBoolean("Count the number of targets?"); 
	if (centers) {
		do {
			target++;
			makeRectangle(0,0,100,60);
			run("Duplicate...", "title=Duplicate_["+target+"]");
			selectWindow("Duplicate_"+target);
			setAutoThreshold("Default dark");
			run("Create Selection");
			List.setMeasurements;
			x=List.getValue("X");
			y=List.getValue("Y");
			IJ.log("x="+x);
			IJ.log("y="+y);
			} while(anotherTarget);
		}	
		
xSites=newArray(target-1);
		
		
centers=getBoolean("Measure Targets?"); 
	if (centers) {
		do {	
			for(i=0; i<target; i++) {
				n++;
				target=n-1;
				time=1;
				selectWindow("Centers_Duplicate");
				makeRectangle(x[i],0,20,6);
				waitForUser("Set Slice and Place rectangle at t=1 of target n (keep same x position as placed)");
				slice=getSliceNumber();
				selectWindow("dsRED_Duplicate");
				setSlice(slice);
				run("Restore Selection");
				List.setMeasurements;
				
				n1_Min=List.getValue("Min");
				setResult("Min_Target_n-1_"+time, target, n1_Min);
				n1_Max=List.getValue("Max");
				setResult("Max_Target_n-1_"+time, target, n1_Max);
				n1_IntDen=List.getValue("IntDen");
				setResult("IntDen_Target_n-1_1"+time, target, n1_IntDen);
				n1_Mean=List.getValue("Mean");
				setResult("Mean_Target_n-1_"+time, target, n1_Mean);
				y=List.getValue("Y");
				
				moreCenters=getBoolean("Is there another n target at the next time point?"); 
					if (moreCenters) {
						do {	
						y=y+6;
						time++;
						selectWindow("Centers_Duplicate");
						makeRectangle(x[i],y,20,6);
						selectWindow("dsRED_Duplicate");
						run("Restore Selection");
						List.setMeasurements;
						n1_Min=List.getValue("Min");
						setResult("Min_Target_n-1"+time, target, n1_Min);
						n1_Max=List.getValue("Max");
						setResult("Max_Target_n-1"+time, target, n1_Max);
						n1_IntDen=List.getValue("IntDen");
						setResult("IntDen_Target_n-1"+time, target, n1_IntDen);
						n1_Mean=List.getValue("Mean");
						setResult("Mean_Target_n-1"+time, target, n1_Mean);
						y=List.getValue("Y");
						} while(anotherMoreCenter);
					}	
				
				
				
				
				
				//waitForUser("Set Slice and Place rectangle in line with target n-1 at t1/2 of target n");
				slice=getSliceNumber();
				selectWindow("dsRED_Duplicate");
				setSlice(slice);
				run("Restore Selection");
				List.setMeasurements;
				n1_Min=List.getValue("Min");
				setResult("Min_Target_n-1", target, n1_Min);
				n1_Max=List.getValue("Max");
				setResult("Max_Target_n-1", target, n1_Max);
				n1_IntDen=List.getValue("IntDen");
				setResult("IntDen_Target_n-1", target, n1_IntDen);
				n1_Mean=List.getValue("Mean");
				setResult("Mean_Target_n-1", target, n1_Mean);
			
				waitForUser("Place rectangle in line with target n at t1/2 of target n");
				getSelectionBounds(x,y,width,height);
				time=y/6;
				selectWindow("dsRED_Duplicate");
				run("Restore Selection");
				List.setMeasurements;
				n_Min=List.getValue("Min");
				setResult("Min_Target_n", target, n_Min);
				n_Max=List.getValue("Max");
				setResult("Max_Target_n", target, n_Max);
				n_IntDen=List.getValue("IntDen");
				setResult("IntDen_Target_n", target, n_IntDen);
				n_Mean=List.getValue("Mean");
				setResult("Mean_Target_n", target, n_Mean);
				setResult("Time", target, time);
			
				anotherCenter=getBoolean("Is there another set of targets?");
				} while(anotherCenter);
			}	
	

selectWindow("Centers_Duplicate");
makeRectangle(0,0,20,6);
waitForUser("Place rectangle for background measurement");
List.setMeasurements;
bg_Mean=List.getValue("Mean");
setResult("Background_Mean", 0, bg_Mean);
bg_IntDen=List.getValue("IntDen");
setResult("Background_IntDen", 0, bg_IntDen);
			
			
	