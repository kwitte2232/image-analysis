//CROPPER FOR BUD CLUSTERING INDEX

//Cropper.txt altered from Devin's Cropper.txt. Used to crop out individual cells in multiple separate channels/stacks


dir=getDirectory("Choose a directory");
print(dir);

list=getFileList(dir);

procDir=dir+"/processedImages/";
	File.makeDirectory(procDir);

counter=0;

for(i=0; i<=list.length-1; i++) {
	open(dir+list[i]);
	frames=nSlices();
	run("Duplicate...", "title=Duplicate");
	selectWindow("Duplicate");
	run("Duplicate...", "title=temp");

	// CROP CELLS

	cropCells = getBoolean("Would you like to crop any fields in this directory?");

	if (cropCells) {

		setBatchMode(true);

		selectWindow("Duplicate");
		name=getTitle();
		selectWindow("temp");
		run("8-bit");
		rename(name+"_thumb.tif");
		setBatchMode(false);
		setLocation(50, 50);

		selectWindow("Duplicate");
		//run("Enhance Contrast", "saturated=0.5");
		cropThis = getBoolean("Would you like to crop any cells in this stack?");

		if (cropThis)	{
			numCrops=0;

			do	{
				selectWindow(name+"_thumb.tif");
				if (numCrops==0)	{
					makeRectangle(1, 1, 75, 75);
				}
				waitForUser("Move or resize the ROI and click OK.");
				numCrops++;
				cellDir=procDir+"/Cell_"+numCrops+File.separator;
				File.makeDirectory(cellDir);
				run("Colors...", "foreground=white background=white selection=yellow");
				run("Draw");
				getSelectionBounds(x, y, width, height);
				xText=x+2;
				yText=y+15;
				setColor(255,255,255);
				setFont("SansSerif" , 12, "antialiased");
				drawString(numCrops, xText, yText);
				saveAs("Tiff", dir+name+"_thumb.tif");

				//FOR EACH CHANNEL THAT YOU WANT TO CROP, REPEAT THE BLOCK OF CODE CALLED "CHANNEL CROP"
					//ALTER SELECTWINDOW() COMMAND AND NAME VARIABLES AS NEEDED

				//BEGIN "CHANNEL CROP"
				selectWindow("Duplicate");
				run("Restore Selection");
				run("Duplicate...", "title=temp duplicate");
				if (numCrops <= 9)
					saveAs("Tiff", cellDir+"BudScars"+counter+"0"+numCrops+".tif");
				else
					saveAs("Tiff", cellDir+"BudScars"+counter+numCrops+".tif");

				close();

				anotherCrop=getBoolean("Would you like to crop another cell in this stack?");
			}	while (anotherCrop);

			selectWindow(name+"_thumb.tif");
			saveAs("Tiff", procDir+name+"_thumb.tif");
			closeAllImages();
		}
	}
	counter++;
}

setBatchMode(false);

// END CROP CELLS


// FUNCTIONS

function closeAllImages()	{
 	while (nImages>0) {
		selectImage(nImages);
		close();
	}
}






//BUD CLUSTERING INDEX MACRO

dir=getDirectory("Choose a directory");
print(dir);

list=getFileList(dir);

for(i=0; i<=list.length-1; i++) {
	open(dir+list[i]);
	run("Duplicate...", "title=Duplicate");
	selectWindow("Duplicate");
	getDimensions(width, height, channels, slices, frames);

	newImage("Untitled", "8-bit White", width, height, frames);
	selectWindow("Untitled");

	roiManager("Reset");

	numScars=0;

	selectWindow("Duplicate");
	run("In");
	run("In");
	run("In");

	scars=getBoolean("Are there bud scars?");

	if(scars){

		do{
			numScars++;
			selectWindow("Duplicate");
			waitForUser("Place a circle on the bud scar");
			roiManager("Add");
			count=roiManager("count");
			j=numScars-1;
        	selectWindow("Untitled");
        	roiManager("Select", j);
			//run("Add Selection...");
			List.setMeasurements;
			centerX=List.getValue("X");
			centerY=List.getValue("Y");
			pixel=getPixel(centerX, centerY);
			makeRectangle(centerX, centerY,1,1);
			setColor("black");
			fill();

			anotherScar=getBoolean("Is there another scar?");
		} 	while (anotherScar);
	}

	selectWindow("Untitled");
	run("Select None");
	//waitForUser("Debugging");

	run("Set Measurements...", "centroid");
	selectWindow("Untitled");
	run("Analyze Particles...", "size=0-Infinity circularity=0.00-1.00 show=Outlines display summarize record");
	selectWindow("Untitled");
	run("Nnd ");
	selectWindow("Nearest Neighbor Distances");
	number=i+1;
	saveAs("measurements", dir+"Cell_"+number+"_Nnd.txt");
	selectWindow("Results");
	run("Close");
	closeAllImages();
}

	// FUNCTIONS

function closeAllImages()	{
 	while (nImages>0) {
		selectImage(nImages);
		close();
	}
}


// selectWindow("Duplicate");
// makeOval(0,0,15,15);
// waitForUser("position roi on cell");
// List.setMeasurements;
// xText=List.getValue("X");
// yText=List.getValue("Y");
// setColor(255,255,255);
// setFont("SansSerif" , 12, "antialiased");
// drawString(1, xText, yText);
